{
  "name": "Crawl Agent",
  "nodes": [
    {
      "parameters": {},
      "id": "f56fefd0-f204-44c5-ba71-b3bc1df1460a",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        100,
        840
      ]
    },
    {
      "parameters": {
        "url": "https://legislation.nsw.gov.au/sitemap.xml",
        "options": {}
      },
      "id": "8b50915a-998d-4f43-93db-75710e9c4f4e",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        840
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a63dbc14-6cc9-44db-8745-33b41eb315e2",
      "name": "XML",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        480,
        840
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "urlset.url",
        "options": {}
      },
      "id": "a03b659a-39dd-4356-bd57-3b6707624e0f",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        660,
        840
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "0b11f25a-bbf0-40b4-83fc-1e9e761dc853",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        860,
        840
      ]
    },
    {
      "parameters": {},
      "id": "d4bce6cc-9389-4a1d-99ef-57e59d5f5ff5",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1320,
        840
      ],
      "webhookId": "9af87c5e-b07f-48dc-9ca8-61b471a24cad"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:11235/crawl",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "urls",
              "value": "={{ $json.loc }}"
            },
            {
              "name": "priority",
              "value": "10"
            }
          ]
        },
        "options": {}
      },
      "id": "329f3b26-8164-4909-83aa-11a0bcd94688",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        840
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "zgCZ0zaotLMWedYs",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "=http://crawl4ai:11235/{{ $json.task_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "timeout": 5000
        }
      },
      "id": "1a70ed26-bc07-4339-879a-bef18ee013c0",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1540,
        840
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "zgCZ0zaotLMWedYs",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9d90c1ce-590e-40a5-ae8c-d92326032975",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "afbbc4f7-6fdb-4a2b-bb45-af4067684865",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        840
      ]
    },
    {
      "parameters": {
        "chunkSize": 5000
      },
      "id": "3e2044ee-6246-47c3-8727-4cfecef5b159",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2280,
        940
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f2bcdb54-e1fe-4670-99aa-6eec973bf5f1",
              "name": "task_id",
              "value": "={{ $('HTTP Request1').item.json.task_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f43ca26c-fc1d-4d57-9c4b-3fd4102c4b34",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2000,
        1000
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "9f1d03f3-3aec-46fc-b4d1-ed2f5e5a1596",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        760,
        40
      ],
      "webhookId": "0949763f-f3f7-46bf-8676-c050d92e6966"
    },
    {
      "parameters": {},
      "id": "52364735-e192-4cab-9241-4f1ecea5da5e",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1120,
        280
      ],
      "credentials": {
        "postgres": {
          "id": "9DsnG4z6KNJd9AdE",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "pydantic_ai_docs",
        "description": "Retrieves data related to Pydantic AI using their documentation."
      },
      "id": "90cb0b6f-4523-43e6-b904-60e04a55fc0d",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        1400,
        160
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "ae8d13a8-0dc3-4200-ab42-6ff2efa5e52c",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        2260,
        280
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "83ddc550-391f-4799-98c4-b1ab836df591",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1020,
        40
      ]
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "8312db4e-fb03-431c-bb28-149c88e4c1d1",
      "name": "Supabase Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        2240,
        -20
      ]
    },
    {
      "parameters": {
        "content": "# n8n + Crawl4AI Agent\n\n## Author: [Cole Medin](https://www.youtube.com/@ColeMedin)\n\nThis AI agent demonstrates how to use a Docker deployment of Crawl4AI to leverage this incredible open source web scraping tool directly in n8n.\n\nThe prerequisite for this workflow is that you have Crawl4AI hosted in a Docker container following these [instructions in the their docs](https://docs.crawl4ai.com/core/docker-deploymeny/).\n\n## How to use this workflow\n\n1. Execute the bottom workflow by clicking on \"Test workflow\". This will ingest all the Pydantic AI documentation into the Supabase DB for RAG.\n\n2. Chat with the agent with the \"Chat\" button - it'll be able to answer questions about Pydantic AI using the documentation as its source!\n\n## Extend this workflow!\n\nThis is just a starting point showing you how to use Crawl4AI in n8n! Feel free to take this along with the Crawl4AI documentation to run wild with building RAG AI agents. The possibilities with this setup are endless!",
        "height": 613.6610941618816,
        "width": 589.875,
        "color": 6
      },
      "id": "2746d628-8ead-455e-bd9c-0da2efb24cd4",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        -320
      ]
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        2000,
        820
      ],
      "id": "0f5c3a19-ec27-4990-b0bf-3b4fb95b234c",
      "name": "Embeddings Ollama1",
      "credentials": {
        "ollamaApi": {
          "id": "xqXac72sGt5IGFOP",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "legislation",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [
        1960,
        500
      ],
      "id": "869080f8-d92d-46c8-85c1-adca9eb71aea",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "9DsnG4z6KNJd9AdE",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.result.markdown }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "page",
                "value": "={{ $json.result.url }}"
              }
            ]
          }
        }
      },
      "id": "29381fae-e24b-495c-9878-226db5c6cc82",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2180,
        800
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        1620,
        420
      ],
      "id": "a4aacd3a-f8e5-4cbd-a22d-2d708e397259",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "xqXac72sGt5IGFOP",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [
        1300,
        360
      ],
      "id": "be877b2e-358d-4df7-ba00-cafa7bd78a8b",
      "name": "Postgres PGVector Store1",
      "credentials": {
        "postgres": {
          "id": "9DsnG4z6KNJd9AdE",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        1280,
        500
      ],
      "id": "29f655bf-694f-4104-bb50-43bdee3fd67f",
      "name": "Embeddings Ollama",
      "credentials": {
        "ollamaApi": {
          "id": "xqXac72sGt5IGFOP",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        940,
        280
      ],
      "id": "1f2f21df-2262-4df8-a77b-f3159257e75e",
      "name": "Ollama Chat Model1",
      "credentials": {
        "ollamaApi": {
          "id": "xqXac72sGt5IGFOP",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst { DOMParser } = require('xmldom');\nconst xpath = require('xpath');\n\nasync function extractSection() {\n  try {\n    // Fetch the XML data\n    const response = await axios.get(\n      'https://legislation.nsw.gov.au/view/xml/inforce/current/act-1979-203'\n    );\n    \n    // Parse XML\n    const doc = new DOMParser().parseFromString(response.data);\n    \n    // Use XPath to find section 1.1\n    const section = xpath.select(\n      '//*[@id=\"sec.1.1\"]',\n      doc\n    )[0];\n    \n    // Extract text content\n    const text = section?.toString().replace(/<[^>]+>/g, ' ').trim();\n    \n    return text || 'Section not found';\n  } catch (error) {\n    throw new Error(`Failed: ${error.message}`);\n  }\n}\n\n// Execute and return result\nreturn extractSection();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        380
      ],
      "id": "19c1b3da-1207-4dad-8fc1-b1d8b7a18ba4",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "http://localhost:11235/health",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        640
      ],
      "id": "557c47c4-b264-40b7-a857-3cd93a4d9699",
      "name": "HTTP Request3"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XML": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        []
      ]
    },
    "Supabase Vector Store1": {
      "ai_vectorStore": [
        []
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7beeec68-4a1c-41b1-8395-fee94c16758e",
  "meta": {
    "instanceId": "9968302481397c4ce1b699d8dba188ad1525522743f87030837227e8e5f3fcc0"
  },
  "id": "5kTt42uvWN7a8v7y",
  "tags": []
}