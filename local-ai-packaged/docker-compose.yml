volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  crawl4ai_storage:
  redis_data:

networks:
  demo:

x-n8n: &service-n8n
  build: .
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=true
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - NODE_FUNCTION_ALLOW_EXTERNAL=*
    - NODE_FUNCTION_ALLOW_BUILTIN=*
    - CRAWL4AI_ENDPOINT=http://crawl4ai:11235  # Only new addition
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:11434"]
    interval: 10s
    timeout: 5s
    retries: 5

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  flowise:
    image: flowiseai/flowise
    networks: ['demo']
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks: ['demo']
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    image: ankane/pgvector
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRESQL_CONF=|
          shared_buffers=2GB
          work_mem=64MB
          maintenance_work_mem=1GB
          max_wal_size=4GB
          checkpoint_timeout=30min
          pgvector.compatibility=on
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  prometheus:
    image: prom/prometheus
    ports: ["9090:9090"]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks: ["demo"]
  
  
  n8n-import:
    <<: *service-n8n
    build:
      context: .
      dockerfile: Dockerfile.Debian  # Explicitly specify the Dockerfilecontainer_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    build:
      context: .
      dockerfile: Dockerfile.Debian  # Use Debian Dockerfilecontainer_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - C:/Users/ssimington/Documents/clientfilesdummy:/data/clientfiles  # Fixed path
      - ./checkpoints:/data/checkpoints
      - ./tmp:/tmp
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - demo
    environment:
      - N8N_MEMORY_MANAGEMENT_MAX_SIZE=30720
      - NODE_OPTIONS=--max-old-space-size=24576
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}  # From .env
    deploy:
      resources:
        limits:
          memory: 16g
        reservations:
          memory: 8g
  
# Add Redis for workflow queueing
  redis:
    image: redis:alpine
    networks: ["demo"]
    command: 
      - redis-server 
      - --requirepass your_secure_password  # Add password
      - --rename-command FLUSHDB ""
      - --rename-command FLUSHALL ""
    environment:
    - REDIS_PASSWORD=your_secure_password
    volumes:
    - redis_data:/data

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
  
  crawl4ai:
    build:
      context: ./crawl4ai
      dockerfile: Dockerfile
      args:
        ENABLE_GPU: true
    container_name: crawl4ai
    restart: unless-stopped
    ports:
      - "11235:11235"
      - "8000:8000"
    volumes:
      - crawl4ai_storage:/app/data
      - /dev/shm:/dev/shm
    networks:
      - demo
    environment:
      - LOCAL_MODE=true
    depends_on:
      postgres:
        condition: service_healthy